(function() {
    'use strict';
    
    console.log('üéØ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ Lampa v9 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π TMDB)...');
    
    const DEBUG = true;
    
    function log(message, data = null) {
        if (DEBUG) {
            const timestamp = new Date().toLocaleTimeString();
            if (data) {
                console.log(`[${timestamp}] üîπ ${message}`, data);
            } else {
                console.log(`[${timestamp}] üîπ ${message}`);
            }
        }
    }
    
    let processedCards = new WeakSet();
    const requestAttempts = new Map();
    const MAX_ATTEMPTS = 3;
    const ATTEMPT_DELAYS = [0, 5000, 15000];

    // –§—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    function cleanTitle(str) {
        return str.replace(/[\s.,:;‚Äô'`!?]+/g, ' ').trim();
    }
    
    function kpCleanTitle(str) {
        return cleanTitle(str)
            .replace(/^[ \/\\]+/, '')
            .replace(/[ \/\\]+$/, '')
            .replace(/\+( *[+\/\\])+/g, '+')
            .replace(/([+\/\\] *)+\+/g, '+')
            .replace(/( *[\/\\]+ *)+/g, '+');
    }
    
    function normalizeTitle(str) {
        return cleanTitle(str.toLowerCase()
            .replace(/[\-\u2010-\u2015\u2E3A\u2E3B\uFE58\uFE63\uFF0D]+/g, '-')
            .replace(/—ë/g, '–µ'));
    }
    
    function exactMatch(title1, title2) {
        return typeof title1 === 'string' && typeof title2 === 'string' && 
               normalizeTitle(title1) === normalizeTitle(title2);
    }
    
    function partialMatch(title, searchTitle) {
        return typeof title === 'string' && typeof searchTitle === 'string' && 
               normalizeTitle(title).indexOf(normalizeTitle(searchTitle)) !== -1;
    }
    
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    function getCachedRating(id) {
        const timestamp = new Date().getTime();
        const cache = Lampa.Storage.cache('kp_rating', 500, {});
        
        if (cache[id]) {
            if (timestamp - cache[id].timestamp > 60 * 60 * 24 * 30 * 1000) {
                delete cache[id];
                Lampa.Storage.set('kp_rating', cache);
                return false;
            }
        } else {
            return false;
        }
        return cache;
    }
    
    function setCachedRating(id, data) {
        const timestamp = new Date().getTime();
        const cache = Lampa.Storage.cache('kp_rating', 500, {});
        
        if (!cache[id]) {
            cache[id] = data;
            Lampa.Storage.set('kp_rating', cache);
        } else {
            if (timestamp - cache[id].timestamp > 60 * 60 * 24 * 30 * 1000) {
                data.timestamp = timestamp;
                cache[id] = data;
                Lampa.Storage.set('kp_rating', cache);
            } else {
                data = cache[id];
            }
        }
        return data;
    }
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    function getAttemptCount(cardId) {
        return requestAttempts.get(cardId) || 0;
    }
    
    function incrementAttempt(cardId) {
        const count = getAttemptCount(cardId) + 1;
        requestAttempts.set(cardId, count);
        return count;
    }
    
    function shouldRetry(cardId, rating) {
        return (rating === '0.0' || rating === '‚Äî') && getAttemptCount(cardId) < MAX_ATTEMPTS;
    }
    
    function scheduleRetry(cardId, cardData, callback) {
        const attempt = getAttemptCount(cardId);
        const delay = ATTEMPT_DELAYS[attempt] || 30000;
        
        log(`üîÑ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #${attempt + 1} –¥–ª—è "${cardData.title}" —á–µ—Ä–µ–∑ ${delay}–º—Å`);
        
        setTimeout(() => {
            log(`üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #${attempt + 1} –¥–ª—è "${cardData.title}"`);
            getKpRating(cardData, callback, true);
        }, delay);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ TMDB –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
    function getTmdbRating(cardData) {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ TMDB –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
        let rating = '0.0';
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º TMDB
        if (cardData.vote_average && cardData.vote_average > 0) {
            rating = parseFloat(cardData.vote_average).toFixed(1);
            log(`‚úÖ TMDB —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ vote_average: ${rating}`);
        }
        else if (cardData.rating && cardData.rating > 0) {
            rating = parseFloat(cardData.rating).toFixed(1);
            log(`‚úÖ TMDB —Ä–µ–π—Ç–∏–Ω–≥ –∏–∑ rating: ${rating}`);
        }
        else if (cardData.vote_count && cardData.vote_count > 0) {
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞, –Ω–æ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø—É–ª—è—Ä–µ–Ω
            rating = '5.0';
            log(`‚úÖ TMDB: –µ—Å—Ç—å –≥–æ–ª–æ—Å–∞ (${cardData.vote_count}), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥`);
        }
        else {
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
            if (cardData.popularity && cardData.popularity > 10) {
                rating = '6.0';
                log(`‚úÖ TMDB: –≤—ã—Å–æ–∫–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å (${cardData.popularity}), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ 6.0`);
            }
            else if (cardData.release_date) {
                // –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                const releaseYear = new Date(cardData.release_date).getFullYear();
                const currentYear = new Date().getFullYear();
                if (currentYear - releaseYear <= 2) {
                    rating = '5.5';
                    log(`‚úÖ TMDB: –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (${releaseYear}), —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ 5.5`);
                }
            }
        }
        
        return rating;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞/IMDB
    function getKpRating(itemData, callback, isRetry = false) {
        if (!isRetry) {
            requestAttempts.set(itemData.id, 0);
        }
        
        const attempt = incrementAttempt(itemData.id);
        log(`üì° –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è: "${itemData.title || itemData.name}" (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_ATTEMPTS})`);
        
        const cached = getCachedRating(itemData.id);
        if (cached && cached[itemData.id]) {
            const source = Lampa.Storage.get('rating_source', 'tmdb');
            const rating = source === 'kp' ? cached[itemData.id].kp : cached[itemData.id].imdb;
            
            if (shouldRetry(itemData.id, rating)) {
                log(`üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ 0, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                scheduleRetry(itemData.id, itemData, callback);
                return;
            }
            
            log(`‚úÖ –ö—ç—à ${source.toUpperCase()}: ${rating}`);
            callback(rating);
            return;
        }
        
        const network = new Lampa.Reguest();
        const clean_title = kpCleanTitle(itemData.title || itemData.name);
        const search_date = itemData.release_date || itemData.first_air_date || itemData.last_air_date || '0000';
        const search_year = parseInt((search_date + '').slice(0, 4));
        const orig = itemData.original_title || itemData.original_name;
        
        const params = {
            headers: {
                'X-API-KEY': '8c8e1a50-6322-4135-8875-5d40a5420d86'
            }
        };
        
        function searchFilm() {
            let url = 'https://kinopoiskapiunofficial.tech/';
            let url_by_title = Lampa.Utils.addUrlComponent(url + 'api/v2.1/films/search-by-keyword', 'keyword=' + encodeURIComponent(clean_title));
            
            if (itemData.imdb_id) {
                url = Lampa.Utils.addUrlComponent(url + 'api/v2.2/films', 'imdbId=' + encodeURIComponent(itemData.imdb_id));
                log(`üîç –ü–æ–∏—Å–∫ –ø–æ IMDB ID: ${itemData.imdb_id}`);
            } else {
                url = url_by_title;
                log(`üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${clean_title}`);
            }
            
            network.clear();
            network.timeout(15000);
            network.silent(url, function(json) {
                if (json.items && json.items.length) {
                    chooseFilm(json.items);
                } else if (json.films && json.films.length) {
                    chooseFilm(json.films);
                } else if (url !== url_by_title) {
                    network.clear();
                    network.timeout(15000);
                    network.silent(url_by_title, function(json) {
                        if (json.items && json.items.length) {
                            chooseFilm(json.items);
                        } else if (json.films && json.films.length) {
                            chooseFilm(json.films);
                        } else {
                            chooseFilm([]);
                        }
                    }, function(a, c) {
                        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é`, network.errorDecode(a, c));
                        chooseFilm([]);
                    }, false, {
                        headers: params.headers
                    });
                } else {
                    chooseFilm([]);
                }
            }, function(a, c) {
                log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞`, network.errorDecode(a, c));
                chooseFilm([]);
            }, false, {
                headers: params.headers
            });
        }
        
        function chooseFilm(items) {
            if (items && items.length) {
                let is_sure = false;
                let is_imdb = false;
                
                items.forEach(function(c) {
                    const year = c.start_date || c.year || '0000';
                    c.tmp_year = parseInt((year + '').slice(0, 4));
                });
                
                let cards = items;
                
                if (itemData.imdb_id) {
                    const tmp = items.filter(function(elem) {
                        return (elem.imdb_id || elem.imdbId) == itemData.imdb_id;
                    });
                    if (tmp.length) {
                        cards = tmp;
                        is_sure = true;
                        is_imdb = true;
                    }
                }
                
                if (orig) {
                    const _tmp = cards.filter(function(elem) {
                        return partialMatch(elem.nameOriginal || elem.orig_title, orig) || 
                               partialMatch(elem.nameEn || elem.en_title, orig) || 
                               partialMatch(elem.nameRu || elem.ru_title || elem.name, orig);
                    });
                    if (_tmp.length) {
                        cards = _tmp;
                        is_sure = true;
                    }
                }
                
                if (itemData.title) {
                    const _tmp2 = cards.filter(function(elem) {
                        return partialMatch(elem.nameRu || elem.ru_title || elem.name, itemData.title) || 
                               partialMatch(elem.nameEn || elem.en_title, itemData.title) || 
                               partialMatch(elem.nameOriginal || elem.orig_title, itemData.title);
                    });
                    if (_tmp2.length) {
                        cards = _tmp2;
                        is_sure = true;
                    }
                }
                
                if (cards.length > 1 && search_year) {
                    let _tmp3 = cards.filter(function(c) {
                        return c.tmp_year == search_year;
                    });
                    if (!_tmp3.length) {
                        _tmp3 = cards.filter(function(c) {
                            return c.tmp_year && c.tmp_year > search_year - 2 && c.tmp_year < search_year + 2;
                        });
                    }
                    if (_tmp3.length) cards = _tmp3;
                }
                
                if (cards.length == 1 && is_sure && !is_imdb) {
                    if (search_year && cards[0].tmp_year) {
                        is_sure = cards[0].tmp_year > search_year - 2 && cards[0].tmp_year < search_year + 2;
                    }
                    if (is_sure) {
                        is_sure = false;
                        if (orig) {
                            is_sure |= exactMatch(cards[0].nameOriginal || cards[0].orig_title, orig) || 
                                      exactMatch(cards[0].nameEn || cards[0].en_title, orig) || 
                                      exactMatch(cards[0].nameRu || cards[0].ru_title || cards[0].name, orig);
                        }
                        if (itemData.title) {
                            is_sure |= exactMatch(cards[0].nameRu || cards[0].ru_title || cards[0].name, itemData.title) || 
                                      exactMatch(cards[0].nameEn || cards[0].en_title, itemData.title) || 
                                      exactMatch(cards[0].nameOriginal || cards[0].orig_title, itemData.title);
                        }
                    }
                }
                
                if (cards.length == 1 && is_sure) {
                    const id = cards[0].filmId || cards[0].kinopoisk_id || cards[0].kinopoiskId || cards[0].kp_id;
                    log(`üé¨ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º: ${cards[0].nameRu || cards[0].name} (ID: ${id})`);
                    
                    network.clear();
                    network.timeout(15000);
                    network.silent('https://kinopoiskapiunofficial.tech/api/v2.2/films/' + id, function(data) {
                        const ratingData = {
                            kp: data.ratingKinopoisk || '0.0',
                            imdb: data.ratingImdb || '0.0'
                        };
                        
                        const cachedData = setCachedRating(itemData.id, {
                            kp: ratingData.kp,
                            imdb: ratingData.imdb,
                            timestamp: new Date().getTime()
                        });
                        
                        const source = Lampa.Storage.get('rating_source', 'tmdb');
                        const rating = source === 'kp' ? cachedData.kp : cachedData.imdb;
                        
                        if (shouldRetry(itemData.id, rating)) {
                            log(`üîÑ –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ 0, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                            scheduleRetry(itemData.id, itemData, callback);
                        } else {
                            log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ ${source.toUpperCase()} –ø–æ–ª—É—á–µ–Ω: ${rating} (–ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫)`);
                            callback(rating);
                        }
                    }, function(a, c) {
                        log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ñ–∏–ª—å–º–∞`, network.errorDecode(a, c));
                        
                        if (shouldRetry(itemData.id, '0.0')) {
                            log(`üîÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                            scheduleRetry(itemData.id, itemData, callback);
                        } else {
                            const cachedData = setCachedRating(itemData.id, {
                                kp: '0.0',
                                imdb: '0.0',
                                timestamp: new Date().getTime()
                            });
                            callback('0.0');
                        }
                    }, false, {
                        headers: params.headers
                    });
                } else {
                    log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è`);
                    
                    if (shouldRetry(itemData.id, '0.0')) {
                        log(`üîÑ –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                        scheduleRetry(itemData.id, itemData, callback);
                    } else {
                        const cachedData = setCachedRating(itemData.id, {
                            kp: '0.0',
                            imdb: '0.0',
                            timestamp: new Date().getTime()
                        });
                        callback('0.0');
                    }
                }
            } else {
                log(`‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
                
                if (shouldRetry(itemData.id, '0.0')) {
                    log(`üîÑ –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                    scheduleRetry(itemData.id, itemData, callback);
                } else {
                    const cachedData = setCachedRating(itemData.id, {
                        kp: '0.0',
                        imdb: '0.0',
                        timestamp: new Date().getTime()
                    });
                    callback('0.0');
                }
            }
        }
        
        searchFilm();
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ Lampa
    function getLampaRating(itemData, callback, isRetry = false) {
        if (!isRetry) {
            requestAttempts.set('lampa_' + itemData.id, 0);
        }
        
        const attempt = incrementAttempt('lampa_' + itemData.id);
        log(`üì° –ó–∞–ø—Ä–æ—Å —Ä–µ–π—Ç–∏–Ω–≥–∞ Lampa –¥–ª—è: "${itemData.title || itemData.name}" (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${MAX_ATTEMPTS})`);
        
        const cached = getCachedRating('lampa_' + itemData.id);
        if (cached && cached['lampa_' + itemData.id]) {
            const rating = cached['lampa_' + itemData.id].rating;
            
            if (shouldRetry('lampa_' + itemData.id, rating)) {
                log(`üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ Lampa 0, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                scheduleRetry('lampa_' + itemData.id, itemData, callback);
                return;
            }
            
            log(`‚úÖ –ö—ç—à Lampa: ${rating}`);
            callback(rating);
            return;
        }
        
        let type = 'movie';
        if (itemData.number_of_seasons || itemData.first_air_date || itemData.original_name) {
            type = 'tv';
        }
        
        const cacheKey = type + '_' + itemData.id;
        const url = 'http://cub.bylampa.online/api/reactions/get/' + cacheKey;
        const network = new Lampa.Reguest();
        
        network.timeout(10000);
        network.silent(url, function(response) {
            let rating = '0.0';
            
            if (response && response.result) {
                const items = response.items || response.result;
                let likes = 0;
                let dislikes = 0;
                
                items.forEach(function(reaction) {
                    if (reaction.type === 'like' || reaction.type === 'love') {
                        likes += parseInt(reaction.count, 10);
                    }
                    if (reaction.type === 'dislike' || reaction.type === 'hate' || reaction.type === 'bore') {
                        dislikes += parseInt(reaction.count, 10);
                    }
                });
                
                const calculatedRating = likes + dislikes > 0 ? likes / (likes + dislikes) * 10 : 0;
                rating = calculatedRating.toFixed(1);
            }
            
            setCachedRating('lampa_' + itemData.id, { rating: rating });
            
            if (shouldRetry('lampa_' + itemData.id, rating)) {
                log(`üîÑ –ü–æ–ª—É—á–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥ Lampa 0, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                scheduleRetry('lampa_' + itemData.id, itemData, callback);
            } else {
                log(`‚úÖ –†–µ–π—Ç–∏–Ω–≥ Lampa –ø–æ–ª—É—á–µ–Ω: ${rating} (–ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫)`);
                callback(rating);
            }
        }, function(error) {
            log(`‚ùå –û—à–∏–±–∫–∞ Lampa API`, error);
            
            if (shouldRetry('lampa_' + itemData.id, '0.0')) {
                log(`üîÑ –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Lampa, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å`);
                scheduleRetry('lampa_' + itemData.id, itemData, callback);
            } else {
                setCachedRating('lampa_' + itemData.id, { rating: '0.0' });
                callback('0.0');
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º TMDB
    function processCard(cardElement) {
        if (!cardElement || !cardElement.querySelector) return;
        if (processedCards.has(cardElement)) return;
        
        const cardData = cardElement.card_data;
        if (!cardData || !cardData.id) return;
        
        const ratingSource = Lampa.Storage.get('rating_source', 'tmdb');
        const ratingElement = cardElement.querySelector('.card__vote');
        
        if (!ratingElement) return;

        log(`üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞: "${cardData.title || cardData.name}" (${ratingSource})`);
        
        // –û—á–∏—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
        ratingElement.innerHTML = '';
        ratingElement.className = 'card__vote';
        
        if (ratingSource === 'tmdb') {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ TMDB –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏
            const rating = getTmdbRating(cardData);
            const displayRating = rating === '0.0' ? '‚Äî' : rating;
            
            ratingElement.innerHTML = `
                <span class="rating-value">${displayRating}</span>
                <span class="rating-source">TMDB</span>
            `;
            ratingElement.className = 'card__vote card__vote--tmdb';
            
            processedCards.add(cardElement);
            log(`‚úÖ TMDB —Ä–µ–π—Ç–∏–Ω–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${displayRating} –¥–ª—è "${cardData.title}"`);
            return;
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        ratingElement.innerHTML = '<span class="rating-loading">...</span>';
        ratingElement.className = `card__vote card__vote--${ratingSource}`;
        
        const updateRating = (rating) => {
            const displayRating = rating === '0.0' ? '‚Äî' : rating;
            const attempt = getAttemptCount(ratingSource === 'lampa' ? 'lampa_' + cardData.id : cardData.id);
            
            ratingElement.innerHTML = `
                <span class="rating-value">${displayRating}</span>
                <span class="rating-source">${ratingSource.toUpperCase()}</span>
                ${attempt > 1 ? `<span class="rating-attempt">(${attempt})</span>` : ''}
            `;
            processedCards.add(cardElement);
            log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–π—Ç–∏–Ω–≥: ${displayRating} –¥–ª—è "${cardData.title}" (–ø–æ–ø—ã—Ç–æ–∫: ${attempt})`);
        };
        
        if (ratingSource === 'lampa') {
            getLampaRating(cardData, updateRating);
        } else {
            getKpRating(cardData, updateRating);
        }
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    function processAllCards() {
        log('üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ...');
        const cards = document.querySelectorAll('.card');
        log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cards.length}`);
        
        cards.forEach((card, index) => {
            setTimeout(() => {
                try {
                    processCard(card);
                } catch (error) {
                    log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏', error);
                }
            }, index * 200);
        });
    }
    
    function addSettings() {
        Lampa.SettingsApi.addParam({
            component: 'interface',
            param: {
                name: 'rating_source',
                type: 'select',
                values: {
                    'tmdb': 'TMDB',
                    'lampa': 'LAMPA', 
                    'kp': '–ö–∏–Ω–æ–ø–æ–∏—Å–∫',
                    'imdb': 'IMDB'
                },
                default: 'tmdb'
            },
            field: {
                name: '–ò—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞',
                description: '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫'
            },
            onChange: function(value) {
                Lampa.Storage.set('rating_source', value);
                log(`üîÑ –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${value}`);
                Lampa.Noty.show(`–†–µ–π—Ç–∏–Ω–≥: ${value.toUpperCase()}`);
                
                processedCards = new WeakSet();
                requestAttempts.clear();
                setTimeout(processAllCards, 1000);
            }
        });
    }
    
    function addStyles() {
        const style = document.createElement('style');
        style.textContent = `
            .card__vote {
                background: rgba(0, 0, 0, 0.7);
                color: white;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
                display: flex;
                align-items: center;
                gap: 4px;
                min-width: 50px;
                justify-content: center;
            }
            
            .card__vote--imdb {
                background: #f5c518;
                color: black;
            }
            
            .card__vote--kp {
                background: #ff5500;
                color: white;
            }
            
            .card__vote--lampa {
                background: #0078d7;
                color: white;
            }
            
            .card__vote--tmdb {
                background: linear-gradient(90deg, #90cea1, #01b4e4);
                color: white;
            }
            
            .rating-loading {
                color: #ccc;
                font-style: italic;
            }
            
            .rating-source {
                font-size: 10px;
                opacity: 0.8;
            }
            
            .rating-value {
                font-weight: bold;
            }
            
            .rating-attempt {
                font-size: 8px;
                opacity: 0.6;
                margin-left: 2px;
            }
        `;
        document.head.appendChild(style);
    }
    
    function startObserver() {
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === 1 && node.classList.contains('card')) {
                        setTimeout(() => {
                            if (!processedCards.has(node)) {
                                log('üÜï –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
                                processCard(node);
                            }
                        }, 100);
                    }
                });
            });
        });
        
        observer.observe(document.body, { childList: true, subtree: true });
    }
    
    function initPlugin() {
        if (window.rating_plugin_initialized) return;
        window.rating_plugin_initialized = true;
        
        log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞...');
        
        addSettings();
        addStyles();
        startObserver();
        
        setTimeout(() => {
            processAllCards();
        }, 2000);
        
        log('‚úÖ –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    if (window.appready) {
        setTimeout(initPlugin, 1000);
    } else {
        Lampa.Listener.follow('app', (e) => {
            if (e.type === 'ready') setTimeout(initPlugin, 1000);
        });
    }
})();
